# -*- coding: utf-8 -*-
"""ENTREGABLE AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CMQNKj4hnk3s0d1BPwSouE6wDEnxpOnk

# **Entregable módulo Inteligencia Artificial**

Zúñiga Aspas, Alba.

En principio lo que voy a plantear es una posible herramienta para estudiantes en la cual podremos introducir texto y este será procesado de manera que obtendremos preguntas y soluciones del mismo.

*   Empezamos con la descarga de la dependencia OpenAI
*   Descargamos ahora las librerías que vamos a necesitar
*   Configuramos la API de OpenAI
*   Definiremos un texto de prueba
*   Definiremos una función que se encargará de poner en marcha el proceso a través de lo que le indiquemos en el prompt y con más especificaciones como el modelo, la temperatura, etc.
*   Finalmente imprimiremos por pantalla la solución

He dejado antes de la celda exitosa algunos problemas con los que me he encontrado. Los comentaré por encima.
"""

# Instalar dependencias
!pip install openai --upgrade

# Importar librerías necesarias
import openai
import getpass

# Configurar la API de OpenAI
api_key = getpass.getpass("Introduce tu clave de API de OpenAI:")
openai.api_key = api_key

# Función para generar preguntas y respuestas
def generate_questions_answers(text, model="gpt-3.5-turbo"):
    messages = [
        {"role": "system", "content": "You are an expert in generating questions and answers."},
        {"role": "user", "content": f"Please read the following text and generate a set of questions with their corresponding answers.\n\nText: {text}\n\nProvide the output in the following format:\nQ1: [Question]\nA1: [Answer]\nQ2: [Question]\nA2: [Answer]\n...\n\nBegin now:"}
    ]

    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        max_tokens=1000,
        temperature=0.7
    )

    return response.choices[0].message["content"].strip()

# Ejemplo de uso
text = """
La inteligencia artificial (IA) es un campo de estudio de la informática dedicado al desarrollo de sistemas que pueden realizar tareas que normalmente requieren inteligencia humana. Estas tareas incluyen el reconocimiento de voz, el aprendizaje, la planificación y la resolución de problemas. La IA se utiliza en una amplia gama de aplicaciones, desde asistentes virtuales hasta vehículos autónomos.
"""

# Generar preguntas y respuestas
qa_pairs = generate_questions_answers(text)
print(qa_pairs)

"""En esta celda nos encontramos con que "openai.ChatCompletion, but this is no longer supported in openai" había decidido utilizarla porque en la documentación aparece pero finalmente podremos ver que me decanto por la que nos mostraste en clase. Aun así pruebo a continuación cambiando versión por si pudiera funcionar."""

# Instalar una versión específica de la librería openai
!pip install openai==0.27.0

# Importar librerías necesarias
import openai
import getpass

# Configurar la API de OpenAI
api_key = getpass.getpass("Introduce tu clave de API de OpenAI:")
openai.api_key = api_key

# Función para generar preguntas y respuestas
def generate_questions_answers(text, model="gpt-3.5-turbo"):
    prompt = f"""
    You are an expert in generating questions and answers based on a given text. Please read the following text and generate a set of questions with their corresponding answers.

    Text: {text}

    Provide the output in the following format:
    Q1: [Question]
    A1: [Answer]
    Q2: [Question]
    A2: [Answer]
    ...

    Begin now:
    """

    response = openai.Completion.create(
        model=model,
        prompt=prompt,
        max_tokens=1000,
        temperature=0.7,
        n=1,
        stop=None
    )

    return response.choices[0].text.strip()

# Ejemplo de uso
text = """
La inteligencia artificial (IA) es un campo de estudio de la informática dedicado al desarrollo de sistemas que pueden realizar tareas que normalmente requieren inteligencia humana. Estas tareas incluyen el reconocimiento de voz, el aprendizaje, la planificación y la resolución de problemas. La IA se utiliza en una amplia gama de aplicaciones, desde asistentes virtuales hasta vehículos autónomos.
"""

# Generar preguntas y respuestas
qa_pairs = generate_questions_answers(text)
print(qa_pairs)

# Instalar la última versión de OpenAI
!pip install openai --upgrade

# Importar librerías necesarias
import openai
import os
from google.colab import userdata

# Configurar la API de OpenAI
os.environ["OPENAI_API_KEY"] = userdata.get('api_key')
openai.api_key = os.environ["OPENAI_API_KEY"]

# Texto proporcionado
texto = """
The fields of mathematics, probability, and statistics use formal definitions of randomness, typically assuming that there is some 'objective' probability distribution. In statistics, a random variable is an assignment of a numerical value to each possible outcome of an event space. This association facilitates the identification and the calculation of probabilities of the events. Random variables can appear in random sequences. A random process is a sequence of random variables whose outcomes do not follow a deterministic pattern, but follow an evolution described by probability distributions. These and other constructs are extremely useful in probability theory and the various applications of randomness.
"""

# Función para generar preguntas y respuestas
def generar_preguntas_respuestas(texto, n_preguntas=5):
    prompt = f"Generate {n_preguntas} questions and answers based on the following text:\n\n{texto}"
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=1000,
        temperature=0.7
    )
    return response.choices[0].message.content

# Generar preguntas y respuestas
qa_text = generar_preguntas_respuestas(texto)
print(qa_text)

"""Podemos ver que finalmente lo consigo poner en marcha. Y como apunte decir que el return en principio también era otro, el return de la función. Era otro porque la estructura de los datos devueltos por la API de OpenAI puede variar según la implementación y versión y a veces, acceder a los elementos del diccionario con corchetes es más seguro y explícito en términos de estructura JSON.

Pero estoy bastante contenta con el resultado porque probé esto mismo sin la API de OpenAI, con modelos pre entrenados de Hugging face y los resultados fueron bastante malillos. Estará adjunto en el github como "Pruebas AI".
"""

